from enveditor import *
import math
# made by D. Stativkin with love and ChatGPT
# Функции софт-клиппинга
def soft_clip(value, threshold, knee, curve_type):
    abs_val = abs(value)
    sign = 1 if value >= 0 else -1
    t = threshold
    k = knee

    if abs_val < t:
        return value  # Линейная область
    elif curve_type == "Exponential":
        excess = abs_val - t
        clipped = t + (1 - math.exp(-excess / k)) * k
    elif curve_type == "Sine":
        excess = abs_val - t
        if excess > k: excess = k
        clipped = t + math.sin((excess / k) * (math.pi / 2)) * k
    elif curve_type == "Tanh":  # Tanh
        excess = abs_val - t
        clipped = t + math.tanh(excess / k) * k
    elif curve_type == "Arctangent":  # Arctangent
        excess = abs_val - t
        clipped = t + (2 / math.pi) * math.atan(excess / k) * k
    else:  # Default: Logarithmic
        excess = abs_val - t
        clipped = t + math.log1p(excess / k) * k

    return sign * min(clipped, 1.0)

# Кубическая интерполяция (Catmull-Rom)
def cubic_interp(y0, y1, y2, y3, mu):
    mu2 = mu * mu
    a0 = -0.5 * y0 + 1.5 * y1 - 1.5 * y2 + 0.5 * y3
    a1 = y0 - 2.5 * y1 + 2.0 * y2 - 0.5 * y3
    a2 = -0.5 * y0 + 0.5 * y2
    a3 = y1
    return a0 * mu * mu2 + a1 * mu2 + a2 * mu + a3

def compute_envelope(length, step):
    envelope = []
    for i in range(0, length, step):
        rms = 0.0
        count = min(step, length - i)
        for j in range(count):
            s = 0.0
            for c in range(EditorSample.NumChans):
                s += EditorSample.GetSampleAt(i + j, c) ** 2
            rms += s / EditorSample.NumChans
        rms = math.sqrt(rms / count)
        envelope.append(rms)
    return envelope

def apply_soft_clipper(threshold, knee, gain, oversample_amt, curve_type):
    original_sr = EditorSample.SampleRate

    # Оверсэмплинг
    if oversample_amt > 1:
        EditorSample.SampleRate *= oversample_amt

    length = EditorSample.Length
    env_step = max(32, EditorSample.SampleRate // 1000)
    envelope = compute_envelope(length, env_step)

    x1 = Editor.SelectionStartS
    x2 = Editor.SelectionEndS
    if x2 <= x1:
        x1 = 0
        x2 = EditorSample.Length - 1

    for n in range(x1, x2 + 1):
        if (n - x1) % 10000 == 0:
            Utils.ProgressMsg("Clipping", n - x1, x2 - x1)

        # Индекс и смещение для интерполяции
        idx = (n // env_step)
        mu = (n % env_step) / env_step

        # Безопасно получаем 4 точки
        def safe(i):
            return envelope[min(max(i, 0), len(envelope) - 1)]

        env_amp = cubic_interp(safe(idx - 1), safe(idx), safe(idx + 1), safe(idx + 2), mu)

        for c in range(EditorSample.NumChans):
            val = EditorSample.GetSampleAt(n, c)
            clipped = soft_clip(val, threshold, knee, curve_type)
            result = clipped * env_amp * gain
            EditorSample.SetSampleAt(n, c, result)

    if oversample_amt > 1:
        EditorSample.SampleRate = original_sr

# Создаём интерфейс
form = ScriptDialog("Advanced Soft Clipper", "Soft-clip audio with envelope recovery")

form.AddInputKnob("Threshold", 0.8, 0.01, 1.0)
form.AddInputKnob("Knee", 0.1, 0.01, 1.0)
form.AddInputKnob("Output Gain", 1.0, 0.1, 4.0)
form.AddInputCombo("Oversampling", "1x,2x,4x,8x,16x,32x", 3)  # Default 8x
form.AddInputCombo("Curve Type", "Logarithmic,Exponential,Sine,Tanh,Arctangent", 0)

# Запускаем
if form.Execute():
    threshold = form.GetInputValue("Threshold")
    knee = form.GetInputValue("Knee")
    gain = form.GetInputValue("Output Gain")
    oversample = [1, 2, 4, 8, 16, 32][form.GetInputValue("Oversampling")]
    curve_type = ["Logarithmic", "Exponential", "Sine", "Tanh", "Arctangent"][form.GetInputValue("Curve Type")]

    apply_soft_clipper(threshold, knee, gain, oversample, curve_type)
